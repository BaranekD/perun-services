#!/usr/bin/perl

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Perun::Agent;
use JSON::XS;

our $SERVICE_NAME = "opennebula";
our $PROTOCOL_VERSION = "3.0.0";
my $SCRIPT_VERSION = "3.0.0";

#forward declaration
sub processResourceData;

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHierarchicalData;

#Constants
our $A_USER_MAIL;                  *A_USER_MAIL =                 \'urn:perun:user:attribute-def:def:preferredMail';
our $A_USER_DISPLAY_NAME;          *A_USER_DISPLAY_NAME =         \'urn:perun:user:attribute-def:core:displayName';
our $A_USER_ON_SSH_KEYS;           *A_USER_ON_SSH_KEYS =          \'urn:perun:user:attribute-def:virt:openNebulaSSHAdminKeys';
our $A_U_CERT_DNS;                 *A_U_CERT_DNS  =               \'urn:perun:user:attribute-def:virt:userCertDNs';
our $A_U_KERBEROS_LOGINS;          *A_U_KERBEROS_LOGINS =         \'urn:perun:user:attribute-def:virt:kerberosLogins';
our $A_M_STATUS;                   *A_M_STATUS =                  \'urn:perun:member:attribute-def:core:status';
our $A_USER_LOGIN;                 *A_USER_LOGIN =                \'urn:perun:user_facility:attribute-def:virt:login';
our $A_U_F_BLACKLISTED;            *A_U_F_BLACKLISTED =           \'urn:perun:user_facility:attribute-def:virt:blacklisted';
our $A_RESOURCE_ON_GROUP_NAME;     *A_RESOURCE_ON_GROUP_NAME =    \'urn:perun:resource:attribute-def:def:openNebulaGroupName';
our $A_RESOURCE_ON_PRIVILEGED;     *A_RESOURCE_ON_PRIVILEGED =    \'urn:perun:resource:attribute-def:def:openNebulaPrivilegedUsers';

my $dataByUser = {};

foreach my $resourceData ($data->getChildElements) {
	processResourceData $resourceData;
}

my @users = values %$dataByUser;
my %outStruc = ( "users" => \@users, );

my $fileName = "$DIRECTORY/$SERVICE_NAME";
open FILE,">$fileName" or die "Cannot open $fileName: $! \n";
print FILE JSON::XS->new->utf8->pretty->canonical->encode(\%outStruc);
close FILE or die "Cannot close $fileName: $! \n";

perunServicesInit::finalize;

###################################################################
################################ SUBS #############################
###################################################################

sub processResourceData {
	my $resourceData = shift;

	my %resourceAttrs = attributesToHash $resourceData->getAttributes;
	my $groupName = $resourceAttrs{$A_RESOURCE_ON_GROUP_NAME};
	my $isPrivileged = $resourceAttrs{$A_RESOURCE_ON_PRIVILEGED};

	for my $memberData ($resourceData->getChildElements) {
		my %memberAttributes = attributesToHash $memberData->getAttributes;

		my $login = $memberAttributes{$A_USER_LOGIN};
		#these operations do just once for login
		if(!defined($dataByUser->{$login})) {		
			#basic attributes
			$dataByUser->{$login}->{"email"} = $memberAttributes{$A_USER_MAIL};
			$dataByUser->{$login}->{"display_name"} = $memberAttributes{$A_USER_DISPLAY_NAME};
			$dataByUser->{$login}->{"login"} = $login;
			$dataByUser->{$login}->{"banned"} = defined($memberAttributes{$A_U_F_BLACKLISTED}) ? 'true' : 'false';
			#empty privileged in groups attribute (always)
			$dataByUser->{$login}->{"privileged_in_groups"} = [];
			#SSH Keys
			$dataByUser->{$login}->{"credentials"}->{"ssh_keys"} = $memberAttributes{$A_USER_ON_SSH_KEYS} || [];
			#Kerberos principals
			$dataByUser->{$login}->{"credentials"}->{"principals"} = $memberAttributes{$A_U_KERBEROS_LOGINS} || [];
			#Cert DNs
			$dataByUser->{$login}->{"credentials"}->{"cert_dns"} = [ map { s/^[0-9]+[:]//; $_} keys %{$memberAttributes{$A_U_CERT_DNS}} ];
		}

		#set group membership and statuses (also groups where is user privileged)
		my $newStatus = $memberAttributes{$A_M_STATUS};
		if(!defined ($dataByUser->{$login}->{"groups"}->{$groupName})) {
			if($isPrivileged) {
				my @privilegedGroups = uniqList( ( @{$dataByUser->{$login}->{"privileged_in_groups"}}, $groupName ) );
				$dataByUser->{$login}->{"privileged_in_groups"} = \@privilegedGroups;
			}
			$dataByUser->{$login}->{"groups"}->{$groupName} = $newStatus;
		} else {
			my $oldStatus = $dataByUser->{$login}->{"groups"}->{$groupName};
			if($newStatus eq 'VALID') {
				$dataByUser->{$login}->{"groups"}->{$groupName} = $newStatus;
			} elsif (($newStatus eq 'SUSPENDED') && ($oldStatus ne 'VALID')) {
				$dataByUser->{$login}->{"groups"}->{$groupName} = $newStatus;
			}
		}
	}
}
