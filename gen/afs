#!/usr/bin/perl
use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use File::Basename;

our $SERVICE_NAME = basename($0);
our $PROTOCOL_VERSION = "3.1.1";
my $SCRIPT_VERSION = "3.0.2";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHierarchicalData;

#Constants
our $A_USER_LOGIN;                *A_USER_LOGIN =              \'urn:perun:user_facility:attribute-def:virt:login';
our $A_F_CELL;                    *A_F_CELL =                  \'urn:perun:facility:attribute-def:def:afsCell';
our $A_F_PARTITION;               *A_F_PARTITION =             \'urn:perun:facility:attribute-def:def:afsPartition';
our $A_F_SERVER;                  *A_F_SERVER =                \'urn:perun:facility:attribute-def:def:afsServer';
our $A_R_DEFAULT_QUOTA;           *A_R_DEFAULT_QUOTA =         \'urn:perun:resource:attribute-def:def:afsDefaultUsersQuota';
our $A_R_DEFAULT_USERS_REALM;     *A_R_DEFAULT_USERS_REALM =   \'urn:perun:resource:attribute-def:def:afsDefaultUsersRealm';
our $A_R_USERS_MOUNT_POINT;       *A_R_USERS_MOUNT_POINT =     \'urn:perun:resource:attribute-def:def:afsUsersMountPoint';
our $A_R_USERS_VOLUME;            *A_R_USERS_VOLUME =          \'urn:perun:resource:attribute-def:def:afsUsersVolume';
our $A_R_VOLUME;                  *A_R_VOLUME =                \'urn:perun:resource:attribute-def:def:afsVolume';
our $A_UF_USER_QUOTA;             *A_UF_USER_QUOTA =           \'urn:perun:user_facility:attribute-def:def:afsUserQuota';
our $A_U_ORGANIZATIONSWITHLOA;    *A_U_ORGANIZATIONSWITHLOA =  \'urn:perun:user:attribute-def:virt:organizationsWithLoa:en';

my $service_file_name = "$DIRECTORY/$::SERVICE_NAME";

my %facilityAttributes = attributesToHash $data->getAttributes;
#####################################

####### output file ######################
open SERVICE_FILE,">$service_file_name" or die "Cannot open $service_file_name: $! \n";

my @resourcesData = $data->getChildElements;
foreach my $rData (@resourcesData) {
	my %resourceAttributes = attributesToHash $rData->getAttributes;

	my @membersData = $rData->getChildElements;
	foreach my $mData (@membersData) {
		my %memberAttributes = attributesToHash $mData->getAttributes;

		print SERVICE_FILE $facilityAttributes{$A_F_SERVER} . "\t";
		print SERVICE_FILE $facilityAttributes{$A_F_CELL} . "\t";
		print SERVICE_FILE $facilityAttributes{$A_F_PARTITION} . "\t";
		print SERVICE_FILE $resourceAttributes{$A_R_DEFAULT_USERS_REALM} . "\t";
		print SERVICE_FILE ($resourceAttributes{$A_R_USERS_MOUNT_POINT} || '') . "\t";
		print SERVICE_FILE ($resourceAttributes{$A_R_USERS_VOLUME} || '') . "\t";
		print SERVICE_FILE ($resourceAttributes{$A_R_VOLUME} || '') . "\t";
		print SERVICE_FILE $memberAttributes{$A_USER_LOGIN} . "\t";

		my $quota = 0;
		if (defined($resourceAttributes{$A_R_DEFAULT_QUOTA})) {
			if (defined($memberAttributes{$A_UF_USER_QUOTA})) {
				if (quotaToKb($memberAttributes{$A_UF_USER_QUOTA}) > quotaToKb($resourceAttributes{$A_R_DEFAULT_QUOTA})) {
					$quota = quotaToKb($memberAttributes{$A_UF_USER_QUOTA});
				} else {
					$quota = quotaToKb($resourceAttributes{$A_R_DEFAULT_QUOTA});
				}
			} else {
				$quota = quotaToKb($resourceAttributes{$A_R_DEFAULT_QUOTA});
			}
		}
		print SERVICE_FILE "$quota\t";

		if(defined $memberAttributes{$A_U_ORGANIZATIONSWITHLOA}->{"University of West Bohemia"}) {
			print SERVICE_FILE "zcu.cz" . "\n";
		} elsif(defined $memberAttributes{$A_U_ORGANIZATIONSWITHLOA}->{"Charles University in Prague"}) {
			print SERVICE_FILE "ruk.cuni.cz" . "\n";
		} else {
			print SERVICE_FILE $facilityAttributes{$A_F_CELL} . "\n";
		}
	}
}
close(SERVICE_FILE);
#####################################################
perunServicesInit::finalize;
