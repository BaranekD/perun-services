#!/usr/bin/perl

use strict;
use warnings;
use perunServicesInit;
use perunServicesUtils;
use Perun::Agent;

# temp:
use Text::Unidecode;

our $SERVICE_NAME = "pbs_publication_fairshare";
our $PROTOCOL_VERSION = "3.0.0";
my $SCRIPT_VERSION = "3.0.0";

perunServicesInit::init;
my $DIRECTORY = perunServicesInit::getDirectory;
my $data = perunServicesInit::getHierarchicalData;

# Constants
our $YEAR;                      *YEAR                 =   \(60 * 60 * 24 * 365);
our $HOW_OLD_PUBLICATIONS;      *HOW_OLD_PUBLICATIONS =   \3;   #in years

our $A_USER_LOGIN;              *A_USER_LOGIN         =   \'urn:perun:user_facility:attribute-def:virt:login';
our $A_USER_UID;                *A_USER_UID           =   \'urn:perun:user_facility:attribute-def:virt:UID';
our $A_USER_ID;                 *A_USER_ID            =   \'urn:perun:user:attribute-def:core:id';
our $A_USER_DISPLAY_NAME;       *A_USER_DISPLAY_NAME  =   \'urn:perun:user:attribute-def:core:displayName'; 

my $nowYear = (localtime)[5] + 1900;

# load users 
my $users = {};

my @resourcesData = $data->getChildElements;
foreach my $rData (@resourcesData) {
	for my $mData ($rData->getChildElements) {
		my %mAttrs = attributesToHash $mData->getAttributes;
		$users->{$mAttrs{$A_USER_ID}}->{"login"} = $mAttrs{$A_USER_LOGIN};
		$users->{$mAttrs{$A_USER_ID}}->{"uid"} = $mAttrs{$A_USER_UID};
		$users->{$mAttrs{$A_USER_ID}}->{"name"} = $mAttrs{$A_USER_DISPLAY_NAME};
		$users->{$mAttrs{$A_USER_ID}}->{"weight"} = 1.0;
		$users->{$mAttrs{$A_USER_ID}}->{"pubs"} = [];
	}
}

my $agent = Perun::Agent->new();
my $cabinetAgent = $agent->getCabinetAgent;

my %categoriesRanks = ();
$categoriesRanks{$_->getId} = $_->getRank foreach($cabinetAgent->findAllCategories);

my @authors = $cabinetAgent->findAllAuthors;

for my $author (@authors) {
	next unless defined $users->{$author->getId}; #filter out users which are not assigned on the facility for which this script is executed right now

	for my $authorship ($author->getAuthorships) {
		# get the publication
		my $publication = $cabinetAgent->getPublicationById(id => $authorship->getPublicationId);

		# filter out too old publications
		if($publication->getYear < $nowYear - $HOW_OLD_PUBLICATIONS) { next; }


		#### Start of fairshare algorithm ####
		my $pubWeight = $categoriesRanks{$publication->getCategoryId} * (1 - (($nowYear - $publication->getYear - 1) / $HOW_OLD_PUBLICATIONS ));
		$users->{$author->getId}->{"weight"} += $pubWeight;
		push @{$users->{$author->getId}->{"pubs"}}, $pubWeight;
		#### End of fairshare algorithm ####
	
	}
}

my $fileName = "$DIRECTORY/$::SERVICE_NAME";
open FILE,">$fileName" or die "Cannot open $fileName: $!";
for my $userRef (sort { $b->{"weight"} <=> $a->{"weight"} } values %$users) {
	printf FILE "%s\t%d\troot\t%.0f\n", $userRef->{"login"}, $userRef->{"uid"}, $userRef->{"weight"};
}

close (FILE);
perunServicesInit::finalize;
